% \VignetteIndexEntry{Bradley-Terry models in R}
% \VignetteKeyword{generalized linear model}
% \VignetteKeyword{logistic regression}
% \VignetteKeyword{penalized quasi-likelihood}
% \VignetteKeyword{ranking}
% \VignetteKeyword{tournament analysis}
% \VignetteKeyword{working residuals}
% \VignettePackage{BradleyTerry2}

%%% For jss:
%% \documentclass{jss}
%% \newcommand{\pkginfo}{}

%%% uncomment for vignette version
\documentclass[nojss]{jss}

\title{Bradley-Terry Models in R}

\Keywords{generalized linear model, logistic regression, penalized quasi-likelihood, ranking, tournament analysis, working residuals}

\begin{document}

\section{Introduction}

The Bradley-Terry model \citep{brad:terr:52} assumes that in a `contest' between
any two `players', say player $i$ and player $j$ $(i, j \in \{1,\ldots,K\})$,
the odds that $i$ beats $j$ are $\alpha_i/\alpha_j$, where $\alpha_i$ and
$\alpha_j$ are positive-valued parameters which might be thought of as
representing `ability'.  A general introduction can be found in
\citet{brad:84} or \citet{agre:02}.
Applications are many, ranging from experimental psychology to the analysis of
sports tournaments to genetics (for example, the allelic
transmission/disequilibrium test of \citealp{sham:curt:95} is based on a
Bradley-Terry model in which the `players' are alleles).
In typical
psychometric applications the `contests' are comparisons, made by
different human subjects, between pairs of items.

% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$A, p, r$}
    \IF{$p < r$} 
        \STATE $q = $ \CALL{Partition}{$A, p, r$}
        \STATE \CALL{Quicksort}{$A, p, q - 1$}
        \STATE \CALL{Quicksort}{$A, q + 1, r$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$A, p, r$}
    \STATE $x = A[r]$
    \STATE $i = p - 1$
    \FOR{$j = p$ \TO $r - 1$}
        \IF{$A[j] < x$}
            \STATE $i = i + 1$
            \STATE exchange
            $A[i]$ with $A[j]$
        \ENDIF
        \STATE exchange $A[i]$ with $A[r]$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}


\begin{algorithm}
	\caption{Algorithm for the maximization of a continuously differentiable multi-convex function}
	\begin{algorithmic}
		\STATE {\bfseries Result:} {$\mathbf a_1^s, \ldots,  \mathbf a_J^s$ (approximate solution of ($\ref{eq:unstructured}$))}
		\STATE {\bfseries Initialization:} {choose random vector $\mathbf a_j^0\in\Omega_j, j =1, \ldots, J$, $\varepsilon$;}
		\STATE$s = 0$ ;
		\REPEAT
		\FOR{$j=1$ {\bfseries to} $J$}
		\STATE $\vcenter{\begin{equation}
		     \mathbf a_j^{s+1} = r_j\left(  \mathbf a_1^{s+1}, \ldots,  \mathbf a_{j-1}^{s+1},  \mathbf a_j^{s}, \ldots,  \mathbf a_J^{s}\right).
		\end{equation}}$
		\ENDFOR
		\STATE$s = s + 1$ ;
		\UNTIL{$f( \mathbf a_1^{s+1}, \ldots,  \mathbf a_J^{s+1})-f( \mathbf a_1^s, \ldots,  \mathbf a_J^s) < \varepsilon$}
	\end{algorithmic}
\label{master_algo}
\end{algorithm}


Try ref ~\ref{sec:BTmodel}

The model can
alternatively be expressed in the logit-linear form
\begin{equation}
\logit[\pr(i\ \mathrm{beats}\ j)]=\lambda_i-\lambda_j,
\label{eq:unstructured}
\end{equation}
where $\lambda_i=\log\alpha_i$ for all $i$.  Thus, assuming independence of all
contests, the parameters $\{\lambda_i\}$ can be estimated by
maximum likelihood using standard software for generalized linear models, with a
suitably specified model matrix.  The primary purpose of the \BT\ package \citep{turn:12},
implemented in the \R\ statistical computing environment \citep{ihak:gent:96,
R}, is to facilitate the specification and fitting of such models and some
extensions.

\section*{Acknowledgments}

This work was supported by the UK Engineering and Physical Sciences Research
Council.


\end{document}

